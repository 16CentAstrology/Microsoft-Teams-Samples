<head>
    <script src="https://statics.teams.cdn.office.net/sdk/v1.10.0/js/MicrosoftTeams.min.js"
        integrity="sha384-6oUzHUqESdbT3hNPDDZUa/OunUj5SoxuMXNek1Dwe6AmChzqc6EJhjVrJ93DY/Bv"
        crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        let accessToken;
        let clientId =  <%-clientId%>
            let redirectUri = window.location.origin + "/fb-auth";

        $(document).ready(function () {
            $("#userInformation").hide();
            $("#fbInformation").hide();
            $("#userImg").hide();
        });

        microsoftTeams.initialize();
        function ssoAuthentication() {
            getClientSideToken()
                .then((clientSideToken) => {
                    return getServerSideToken(clientSideToken);
                })
                .catch((error) => {
                    if (error === "invalid_grant") {
                        // Display in-line button so user can consent
                        $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                        $("#divError").show();
                        $("#consent").show();
                    } else {
                        // Display in-line button so user can consent
                        $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                        $("#divError").show();
                        $("#consent").show();
                    }
                });
        }

        function getClientSideToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.getAuthToken({
                    successCallback: (result) => {
                        console.log(result);
                        resolve(result);
                    },
                    failureCallback: function (error) {
                        reject("Error getting token: " + error);
                    }
                });
            });
        }

        function getServerSideToken(clientSideToken) {
            return new Promise((resolve, reject) => {
                microsoftTeams.getContext((context) => {
                    fetch('/getProfileOnBehalfOf', {
                        method: 'post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            'tid': context.tid,
                            'token': clientSideToken
                        }),
                        mode: 'cors',
                        cache: 'default'
                    })
                        .then((response) => {
                            if (response.ok) {
                                console.log(response);
                                return response.json();
                            } else {
                                reject(response.error);
                            }
                        })
                        .then((responseJson) => {
                            if (responseJson.error) {
                                reject(responseJson.error);
                            } else {
                                const userDetails = responseJson;
                                $("#userInfo").text(`You're logged in as ${userDetails.details.displayName} (${userDetails.details.userPrincipalName}); you job title is: ${userDetails.title}; your photo is: `);
                                $("#userImg").attr("src", userDetails.image);
                                $("#userInformation").show();
                                $("#userImg").show();
                            }
                        });
                });
            });
        }

        // Request consent on implicit grant error.
        function requestConsent() {
            getToken()
                .then(data => {
                    $("#consent").hide();
                    $("#divError").hide();
                    accessToken = data.accessToken;
                    microsoftTeams.getContext((context) => {
                        getUserInfo(context.userPrincipalName);
                    });
                });
        }

        // Get token for multi tenant.
        function getToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.authenticate({
                    url: window.location.origin + "/auth-start",
                    width: 600,
                    height: 535,
                    successCallback: result => {
                        resolve(result);
                    },
                    failureCallback: reason => {
                        reject(reason);
                    }
                });
            });
        }


        // Get user information.
        function getUserInfo(userPrincipleName) {
            if (userPrincipleName) {
                $.ajax({
                    type: 'POST',
                    url: '/GetUserDetails',
                    dataType: 'json',
                    data: {
                        'accessToken': accessToken,
                    },
                    success: function (responseJson) {
                        const userDetails = JSON.parse(responseJson);;
                        $("#userInfo").text(`You're logged in as ${userDetails.details.displayName} (${userDetails.details.userPrincipalName}); you job title is: ${userDetails.title}; your photo is: `);
                        $("#userImg").attr("src", userDetails.image);
                        $("#userInformation").show();
                        $("#userImg").show();
                        $("#usingCredentials").hide();
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    }
                });
            }
        }

        function getServerSideTokenFb(clientSideToken) {
            return new Promise((resolve, reject) => {
                microsoftTeams.getContext((context) => {
                    fetch('/getFbAccessToken', {
                        method: 'post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            'token': clientSideToken
                        }),
                        mode: 'cors',
                        cache: 'default'
                    })
                        .then((response) => {
                            if (response.ok) {
                                console.log(response);
                                return response.json();
                            } else {
                                reject(response.error);
                            }
                        })
                        .then((responseJson) => {
                            if (responseJson.error) {
                                reject(responseJson.error);
                            } else {
                                console.log(responseJson);
                                let userFbDetails = responseJson;
                                $("#fbInfo").html(`<b>Your name:</b> ${userFbDetails.name} <br><b>Your email:</b> ${userFbDetails.email};<br><b>Your location is:</b> ${userFbDetails.hometown.name}`);
                                $("#fbInformation").show();
                            }
                        });
                });
            });
        }

        function IsValidJSONString(str) {
            try {
                JSON.parse(str);
            } catch (e) {
                return false;
            }
            return true;
        }

        function usingCredentials() {
            microsoftTeams.authentication.authenticate({
                url: window.location.origin + "/popUpSignin?from=tab",
                width: 600,
                height: 535,
                successCallback: result => {
                    $("#usingCredentials").text(result);
                    $("#usingCredentials").show();
                    $("#userInformation").hide();
                    $("#userImg").hide();
                },
                failureCallback: reason => {
                    console.log(reason);
                }
            });
        }

        function fbAuthentication() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.authenticate({
                    url: `https://www.facebook.com/v12.0/dialog/oauth?client_id=${clientId}&redirect_uri=${redirectUri}&state=1234535`,
                    width: 600,
                    height: 535,
                    successCallback: result => {
                        let data = localStorage.getItem(result);
                        let tokenDetails = JSON.parse(data);
                        localStorage.removeItem(result);
                        resolve(tokenDetails);
                    },
                    failureCallback: reason => {
                        reject(reason);
                    }
                });
            });
        }

        function fbAuth() {
            fbAuthentication()
                .then((result) => {
                    return getServerSideTokenFb(result.idToken);
                })
                .catch((error) => {
                    console.log(error);
                });
        }

    </script>
    <style>
        h3 {
            text-align: center;
            margin-top: 10rem;
        }

        .container {
            text-align: center;
        }

        button {
            margin-left: 36rem;
            margin-top: 1rem;
        }
    </style>
</head>

<body class="theme-light">
    <div class="surface">
        <h3> Welcome to App complete auth sample</h3>
        <div class="container">Select a method to sign in</div>
        <button onclick="usingCredentials()">Using Credentials</button>
        <br />
        <button onclick="fbAuth()">Other identity provider</button>
        <br />
        <button onclick="ssoAuthentication()">SSO</button>
        <button onclick="requestConsent()" id="consent" style="display:none;">Authenticate</button>
        <div id="divError" style="display: none"></div>
        <div id="userInformation">
            User Information:
            <div id="userInfo">
                <br />
            </div>
            <img id="userImg" width="200" height="200" />
        </div>
        <div id="usingCredentials">
        </div>
        <div id="fbInformation">
            <br>
            User Information:
            <div id="fbInfo">
                <br />
            </div>
        </div>
    </div>

</body>