@page
@model AppCompleteAuth.Pages.tabModel
@{
}

<head>
    <script src="https://statics.teams.cdn.office.net/sdk/v1.10.0/js/MicrosoftTeams.min.js"
            integrity="sha384-6oUzHUqESdbT3hNPDDZUa/OunUj5SoxuMXNek1Dwe6AmChzqc6EJhjVrJ93DY/Bv"
            crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script>
        let accessToken;
         $(document).ready(function () {
            $("#userInformation").hide();
            $("#userImg").hide();
            $("#usingCredentials").hide();
            $("#facebookAuth").hide();
         });

        microsoftTeams.initialize();

        function ssoAuthentication()
        {
             getClientSideToken()
            .then((clientSideToken) => {           
                return getServerSideToken(clientSideToken);
            })
            .catch((error) => {
                debugger;
                if (error === "invalid_grant") {
                    // Display in-line button so user can consent
                    $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                    $("#divError").show();
                    $("#consent").show();
                } else {
                    // Display in-line button so user can consent
                    $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                    $("#divError").show();
                    $("#consent").show();
                }
            });
        }

        function getClientSideToken() {

            return new Promise((resolve, reject) => {
            microsoftTeams.authentication.getAuthToken({
                successCallback: (result) => {
                    resolve(result);     
                },
                failureCallback: function (error) {                
                    reject("Error getting token: " + error);
                }
            });
         });
        }

        function getServerSideToken(clientSideToken) {
            return new Promise((resolve, reject) => {
                microsoftTeams.getContext((context) => {
                    var scopes = ["https://graph.microsoft.com/User.Read"];
                    fetch('/GetUserAccessToken', {
                        method: 'get',
                        headers: {
                            "Content-Type": "application/text",
                            "Authorization": "Bearer " + clientSideToken
                        },
                        cache: 'default'
                    })
                    .then((response) => {
                        if (response.ok) {
                            return response.text();
                        } else {
                            debugger;
                            reject(response.error);
                        }
                    })
                    .then((responseJson) => {
                        if(responseJson == ""){
                            $("#divError").text("Error while exchanging for Server token - invalid_grant - User or admin consent is required.");
                            $("#divError").show();
                            $("#consent").show()
                        }else{
                            userDetails = JSON.parse(responseJson);
                            $("#userInfo").text(`You're logged in as ${userDetails.user.displayName} (${userDetails.user.userPrincipalName}); you job title is: ${userDetails.title}; your photo is: `);
                            $("#userImg").attr("src", userDetails.photo);
                            $("#userInformation").show();
                            $("#userImg").show();
                            $("#usingCredentials").hide();
                        }
                    });
                });
            });
        }

        function requestConsent() {
            getToken()
            .then(data => {
            $("#consent").hide();
            $("#divError").hide();
            accessToken = data.accessToken;
            console.log(accessToken)
            microsoftTeams.getContext((context) => {
                getUserInfo(context.userPrincipalName);
            });
          });
        }

        function getToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.authenticate({
                    url: window.location.origin + "/auth-start",
                    width: 600,
                    height: 535,
                    successCallback: result => {
                        resolve(result);
                    },
                    failureCallback: reason => {
                        reject(reason);
                    }
                });
            });
        }

        function usingCredentials(){
            microsoftTeams.authentication.authenticate({
                url: window.location.origin + "/popUpSignin?from=tab",
                width: 600,
                height: 535,
                successCallback: result => {
                    alert(result);
                    $("#usingCredentials").text(result);
                    $("#usingCredentials").show();
                    $("#userInformation").hide();
                    $("#userImg").hide();
                },
                failureCallback: reason => {
                    console.log(reason);
                }
            });              
        }

        function getUserInfo(userPrincipleName) {
            $.ajax({
                 type: 'POST',
                 url: '/GetUserDetails',
                 dataType: 'json',
                 data: {
                            'accessToken': accessToken
                        },
                 success: function (responseJson) {
                       alert(JSON.parse(responseJson));
                    userDetails = JSON.parse(responseJson);
                    $("#userInfo").text(`You're logged in as ${userDetails.user.displayName} (${userDetails.user.userPrincipalName}); you job title is: ${userDetails.title}; your photo is: `);
                    $("#userImg").attr("src", userDetails.photo);
                    $("#userInformation").show();
                    $("#userImg").show();
                    $("#usingCredentials").hide();
                    },
                 error: function (xhr, textStatus, errorThrown) {
                         console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                    },
                });
         }

        function facebookLogin() {

        }
    </script>
    <style>
        h3 {
            text-align: center;
        }
        .container {
            text-align: center;
        }
        button {
            margin-left: 36rem;
            margin-top: 1rem;
        }
        #usingCredentials{
            text-align: center;
        }
    </style>
</head>
<body class="theme-light">
        <div class="surface">
        <h3> Welcome to App complete auth sample</h3>
        <div class="container">Select a method to sign in</div>
        <button onclick="usingCredentials()">Using Credentials</button>
        <br/>
        <button onclick="facebookLogin()" >Other identity provider</button>
        <br />
        <button onclick="ssoAuthentication()">SSO</button>
        <button onclick="requestConsent()" id="consent" style="display:none;">Authenticate</button>
        <div id="divError" style="display: none"></div>
         <div id="userInformation">
            User Information:
            <div id = "userInfo">
                <br />
             </div>
             <img id="userImg" width="200" height="200" />
        </div>
        <div id="usingCredentials">
        </div>
        <div id="facebookAuth">
        </div>
    </div>
   
</body>