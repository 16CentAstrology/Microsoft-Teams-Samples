<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://statics.teams.cdn.office.net/sdk/v1.10.0/js/MicrosoftTeams.min.js"
        integrity="sha384-6oUzHUqESdbT3hNPDDZUa/OunUj5SoxuMXNek1Dwe6AmChzqc6EJhjVrJ93DY/Bv"
        crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <style>
        .card {
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
            width: 31rem;
            height: 10rem;
            margin-left: 2rem;
            margin-top: 0.5rem;
        }

        .card:hover {
            box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
        }

        .container {
            padding: 2px 2px;
            display: flex;
        }

        .profile {
            margin-top: 1rem;
            margin-left: 1rem;
            width: 40rem;
            align-content: flex-start;
        }

        .btn-outline-info {
            margin-top: 6rem;
            width: 15.5rem;
            padding: 0.5rem 0rem;
            margin-left: -8rem;
            margin-right: 1.5rem;
            border-radius: 0.6rem;
        }

        .signin-header {
            margin-left: 2rem;
            margin-top: 1rem;
        }

        .card-container-div {
            margin-left: 30%;
            padding-bottom: 2rem;
        }

        #divError {
            margin-left: -9rem;
            margin-top: 8rem;
        }
        
         #mail-list-table {
            margin-left: 6rem;
        }
        
        td{
            padding:0.3rem;
        }
        #consent{
            margin-left: 8rem;
        }
    </style>
    <script>
        let accessToken;

        $(document).ready(function () {
            $("#mails").hide();
            //ssoAuthentication();
            getClientSideToken();
        });

        microsoftTeams.initialize();
        function ssoAuthentication() {
            getClientSideToken()
                .then((clientSideToken) => {
                    return getServerSideToken(clientSideToken);
                })
                .catch((error) => {
                    alert(error);
                    if (error === "invalid_grant") {
                        // Display in-line button so user can consent
                        $("#divError").text("invalid_grant")
                        $("#sso").hide();
                        $("#divError").show();
                        $("#consent").show();

                    } else {
                        // Display in-line button so user can consent
                        $("#divError").text("invalid_grant")
                        $("#sso").hide();
                        $("#divError").show();
                        $("#consent").show();
                    }
                });
        }

        function getClientSideToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.getAuthToken({
                    successCallback: (result) => {
                        resolve(result);
                        decodingJWT(result)
                    },
                    failureCallback: function (error) {
                        reject("Error getting token: " + error);
                    }
                });
            });
        }


        function getServerSideToken(clientSideToken) {
            return new Promise((resolve, reject) => {
                microsoftTeams.getContext((context) => {
                    fetch('/getProfileOnBehalfOf', {
                        method: 'post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            'tid': context.tid,
                            'token': clientSideToken
                        }),
                        mode: 'cors',
                        cache: 'default'
                    })
                        .then((response) => {
                            if (response.ok) {
                                return response.json();
                            } else {
                                reject(response.error);
                            }
                        })
                        .then((responseJson) => {
                            if (responseJson.error) {
                                reject(responseJson.error);
                            } else {
                                const userDetails = responseJson;
                                for (let i = 0; i < userDetails.details.length; i++) {
                                $('#mail-list-table').append(`<tr style="padding:1px" >
                                    <td><label id=${i + 1}>${i + 1}</label></td>
                                    <td>${userDetails.details[i].from.emailAddress.address}</td>
                                    <td>${userDetails.details[i].toRecipients[0].emailAddress.address}</td>
                                    <td>${userDetails.details[i].subject}</td>
                                    <td>${userDetails.details[i].receivedDateTime}</td>
                                    </tr>`);
                                };
                                $("#mails").show();
                                $("#userImgSso").attr("src", userDetails.image);
                            }
                        });
                });
            });
        }

        // Request consent on implicit grant error.
        function requestConsent() {
            getToken()
                .then(data => {
                    $("#consent").hide();
                    $("#divError").hide();
                    accessToken = data.accessToken;
                    microsoftTeams.getContext((context) => {
                            getUserInfo();
                    });
                });
        }

        // Get token for multi tenant.
        function getToken() {
            return new Promise((resolve, reject) => {
                microsoftTeams.authentication.authenticate({
                    url: window.location.origin + "/auth-start",
                    width: 600,
                    height: 535,
                    successCallback: result => {
                        resolve(result);
                    },
                    failureCallback: reason => {
                        reject(reason);
                    }
                });
            });
        }

        // Get user information.
        function getUserInfo() {
            $.ajax({
                type: 'POST',
                url: '/GetUserDetails',
                dataType: 'json',
                data: {
                    'accessToken': accessToken,
                },
                success: function (responseJson) {
                    const userDetails = responseJson;
                    $("#userImgSso").attr("src", userDetails.image);
                        for (let i = 0; i < userDetails.usermails.length; i++) {
                    $('#mail-list-table').append(`<tr style="padding:1px" >
                        <td><label id=${i + 1}>${i + 1}</label></td>
                        <td>${userDetails.usermails[i].from.emailAddress.address}</td>
                        <td>${userDetails.usermails[i].toRecipients[0].emailAddress.address}</td>
                        <td>${userDetails.usermails[i].subject}</td>
                        <td>${userDetails.usermails[i].receivedDateTime}</td>
                        </tr>`);
                    };
                    $("#mails").show();
                    $("#getmails").hide();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                }
            });
        }

        function decodingJWT(token){
            $.ajax({
                type: 'POST',
                url: '/decodeToken',
                dataType: 'json',
                data: {
                    'accessToken': token,
                },
                success: function (responseJson) {
                    const userDetails = responseJson;
                    $("#name").append(userDetails.name);
                    $("#email").append(userDetails.upn);
                    $("#getmails").show();
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log("textStatus: " + textStatus + ", errorThrown:" + errorThrown);
                }
            });
        }
    </script>
</head>

<body class="theme-light">
    <div class="surface">
        <div class="card-container-div">
            <div>
                <div class="signin-header"><b>User information</b></div>
                <div class="card">
                    <div class="container">
                        <img src="https://media.istockphoto.com/vectors/profile-placeholder-image-gray-silhouette-no-photo-vector-id1016744034?k=20&m=1016744034&s=612x612&w=0&h=kjCAwH5GOC3n3YRTHBaLDsLIuF8P3kkAJc9RvfiYWBY="
                            alt="Avatar" id="userImgSso" width="100px" height="100px">
                        <div class="profile">
                            <span id="name"><b>Name: </b></span><br>
                            <span id="email"><b>Email: </b></span></span><br>
                        </div>
                        <div id="divError" style="display: none"></div>
                        <!-- <button type="button" class="btn-outline-info" onclick="ssoAuthentication()"
                            id="consent">Using Obo flow</button> -->
                        <button type="button" class="btn-outline-info" onclick="requestConsent()"
                            id="getmails" style="display:none;">Get details</button>
                    </div>
                </div>
            </div>
        </div>
        <div id="mails">
            <table border="1" id="mail-list-table">
                <thead>
                    <tr>
                        <td>Sr No.</td>
                        <td>From</td>
                        <td>To</td>
                        <td>Subject</td>
                        <td>Received DateTime</td>
                    </tr>
                </thead>
            </table>
        </div>
    </div>
</body>
